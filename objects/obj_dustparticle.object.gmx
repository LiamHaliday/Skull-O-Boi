<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//create particle system
dustsystem = part_system_create();
part_system_depth(dustsystem,-15);

//create dust particle
dust = part_type_create();
part_type_sprite(dust,spr_dustparticle,0,0,1)
part_type_orientation(dust,-360,360,20,0,1)
part_type_gravity(dust,0.2,270)
part_type_direction(dust,45,135,0,0)
part_type_speed(dust,3,5,0,0)
part_type_life(dust,15,20)
part_type_size(dust,0.15,0.25,0,0)
part_type_alpha2(dust,1,0)

dust_emitter = part_emitter_create(dustsystem);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(ord('A')) || keyboard_check_pressed(ord('W')) || keyboard_check_pressed(ord('S')) || keyboard_check_pressed(ord('D')))
{
 //   part_emitter_region(dustsystem,dust_emitter,obj_player1.x,obj_player1.x,obj_player1.y+50,obj_player1.y+50,ps_shape_rectangle,ps_distr_linear)
//    part_emitter_stream(dustsystem,dust_emitter,dust,-5)
}
if (keyboard_check_released(ord('A')) || keyboard_check_released(ord('W')) || keyboard_check_released(ord('S')) || keyboard_check_released(ord('D')))
{
 //   part_emitter_region(dustsystem,dust_emitter,obj_player1.x,obj_player1.x,obj_player1.y+50,obj_player1.y+50,ps_shape_rectangle,ps_distr_linear)
 //   part_emitter_stream(dustsystem,dust_emitter,dust,-0)
}

if( global.isWalking == true)
{
        part_emitter_region(dustsystem,dust_emitter,obj_player1.x,obj_player1.x,obj_player1.y+50,obj_player1.y+50,ps_shape_rectangle,ps_distr_linear)
        part_emitter_stream(dustsystem,dust_emitter,dust,-8)
}
else
{
    part_emitter_region(dustsystem,dust_emitter,obj_player1.x,obj_player1.x,obj_player1.y+50,obj_player1.y+50,ps_shape_rectangle,ps_distr_linear)
    part_emitter_stream(dustsystem,dust_emitter,dust,-0)
}

if (global.playerLives = 0)
{
    part_system_destroy(dustsystem);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
